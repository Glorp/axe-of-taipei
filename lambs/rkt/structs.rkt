#lang racket
(provide (struct-out ref)
         (struct-out lam)
         (struct-out app)
         (struct-out pair)
         (struct-out fst)
         (struct-out snd)
         (struct-out left)
         (struct-out right)
         (struct-out case)
         (struct-out fun)
         (struct-out prod)
         (struct-out sum)
         (struct-out wild)
         (struct-out :)
         (struct-out sequent))

(struct lam (p x) #:transparent)
(struct app (f a) #:transparent)
(struct pair (f s) #:transparent)
(struct fst (x) #:transparent)
(struct snd (x) #:transparent)
(struct ref (s) #:transparent)
(struct left (x) #:transparent)
(struct right (x) #:transparent)
(struct case (x lp l rp r) #:transparent)

(struct fun (d r) #:transparent)
(struct prod (a b) #:transparent)
(struct sum (l r) #:transparent)
(struct wild () #:transparent)

(struct : (term type) #:transparent)
(struct sequent (antecedents consequent) #:transparent)
